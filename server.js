const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const fs = require('fs');
const path = require('path');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"]
    }
});

// Middleware
app.use(express.json());
app.use(express.static('public'));

// JWT Secret
const JWT_SECRET = 'vibechat_secret_key_2025_ultra_secure';

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
const dataDir = path.join(__dirname, 'data');
if (!fs.existsSync(dataDir)) {
    fs.mkdirSync(dataDir);
}

// –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
const usersFile = path.join(dataDir, 'users.json');
const messagesFile = path.join(dataDir, 'messages.json');
const chatsFile = path.join(dataDir, 'chats.json');
const codesFile = path.join(dataDir, 'codes.json');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
function initFile(file, defaultData) {
    if (!fs.existsSync(file)) {
        fs.writeFileSync(file, JSON.stringify(defaultData, null, 2));
    } else {
        try {
            const content = fs.readFileSync(file, 'utf8');
            if (!content || content.trim() === '') {
                fs.writeFileSync(file, JSON.stringify(defaultData, null, 2));
            } else {
                JSON.parse(content);
            }
        } catch (e) {
            console.log(`‚ö†Ô∏è  –§–∞–π–ª ${file} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º...`);
            fs.writeFileSync(file, JSON.stringify(defaultData, null, 2));
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
initFile(usersFile, []);
initFile(messagesFile, {});
initFile(chatsFile, []);
initFile(codesFile, {});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
function readData(file) {
    try {
        const content = fs.readFileSync(file, 'utf8');
        if (!content || content.trim() === '') {
            return file.includes('messages') ? {} : [];
        }
        return JSON.parse(content);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${file}:`, error);
        return file.includes('messages') ? {} : [];
    }
}

function writeData(file, data) {
    try {
        fs.writeFileSync(file, JSON.stringify(data, null, 2));
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ ${file}:`, error);
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
function generateCode() {
    return Math.floor(100000 + Math.random() * 900000).toString();
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è username (—Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ, 5-20 —Å–∏–º–≤–æ–ª–æ–≤)
function validateUsername(username) {
    const usernameRegex = /^[a-zA-Z0-9_]{5,20}$/;
    return usernameRegex.test(username);
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è email
function validateEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
function validatePassword(password) {
    return password.length >= 6 && password.length <= 50;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
function validateName(name) {
    return name.length >= 2 && name.length <= 50;
}

// ============================================
// API ENDPOINTS
// ============================================

// 1. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø - –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ (–í –ö–û–ù–°–û–õ–¨)
app.post('/api/auth/register/send-code', async (req, res) => {
    try {
        const { email, name, username, password } = req.body;

        console.log('\nüìù –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', { email, name, username });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
        if (!email || !name || !username || !password) {
            return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è email
        if (!validateEmail(email)) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞' });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
        if (!validateName(name)) {
            return res.status(400).json({ error: '–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤' });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è username
        if (!validateUsername(username)) {
            return res.status(400).json({ 
                error: 'Username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –æ—Ç 5 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _)' 
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
        if (!validatePassword(password)) {
            return res.status(400).json({ error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 6 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤' });
        }

        const users = readData(usersFile);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è email
        if (users.find(u => u.email.toLowerCase() === email.toLowerCase())) {
            return res.status(400).json({ error: '–≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è username
        if (users.find(u => u.username.toLowerCase() === username.toLowerCase())) {
            return res.status(400).json({ error: '–≠—Ç–æ—Ç username —É–∂–µ –∑–∞–Ω—è—Ç' });
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
        const code = generateCode();
        const codes = readData(codesFile);
        codes[email] = {
            code,
            userData: { email, name, username, password },
            expires: Date.now() + 10 * 60 * 1000 // 10 –º–∏–Ω—É—Ç
        };
        writeData(codesFile, codes);

        // –í–´–í–û–î –ö–û–î–ê –í –ö–û–ù–°–û–õ–¨
        console.log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
        console.log('‚ïë     üìß –ö–û–î –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø              ‚ïë');
        console.log('‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£');
        console.log(`‚ïë  Email: ${email.padEnd(28)} ‚ïë`);
        console.log(`‚ïë  –ö–æ–¥:   ${code}                        ‚ïë`);
        console.log('‚ïë  –°—Ä–æ–∫:  10 –º–∏–Ω—É—Ç                      ‚ïë');
        console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');

        res.json({ 
            success: true, 
            message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å)',
            devCode: code // –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// 2. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞
app.post('/api/auth/register/verify', async (req, res) => {
    try {
        const { email, code } = req.body;

        console.log('\nüîê –ü–æ–ø—ã—Ç–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', { email, code });

        if (!email || !code) {
            return res.status(400).json({ error: 'Email –∏ –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        const codes = readData(codesFile);
        const savedCode = codes[email];

        if (!savedCode) {
            return res.status(400).json({ error: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.' });
        }

        if (savedCode.expires < Date.now()) {
            delete codes[email];
            writeData(codesFile, codes);
            return res.status(400).json({ error: '–ö–æ–¥ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.' });
        }

        if (savedCode.code !== code.toString()) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' });
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const users = readData(usersFile);
        const { email: userEmail, name, username, password } = savedCode.userData;

        const hashedPassword = await bcrypt.hash(password, 10);

        const newUser = {
            id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
            email: userEmail,
            name,
            username,
            password: hashedPassword,
            avatar: name[0].toUpperCase(),
            bio: '',
            status: '–ü—Ä–∏–≤–µ—Ç! –Ø –∏—Å–ø–æ–ª—å–∑—É—é VibeChat üëã',
            phone: '',
            birthday: '',
            gender: '',
            city: '',
            country: '',
            socialLinks: [],
            profilePhotos: [],
            coverPhoto: '',
            verified: false,
            businessAccount: false,
            qrCode: '',
            lastSeen: Date.now(),
            online: true,
            createdAt: Date.now(),
            settings: {
                notifications: true,
                soundEnabled: true,
                vibrationEnabled: true,
                showOnlineStatus: true,
                showLastSeen: true,
                showProfilePhoto: true,
                showEmail: false,
                showPhone: false
            }
        };

        users.push(newUser);
        writeData(usersFile, users);

        // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–¥–∞
        delete codes[email];
        writeData(codesFile, codes);

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
        const token = jwt.sign({ userId: newUser.id }, JWT_SECRET, { expiresIn: '30d' });

        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', newUser.username);

        res.json({
            success: true,
            token,
            user: {
                id: newUser.id,
                email: newUser.email,
                name: newUser.name,
                username: newUser.username,
                avatar: newUser.avatar,
                bio: newUser.bio,
                status: newUser.status
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// 3. –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø
app.post('/api/auth/login', async (req, res) => {
    try {
        const { email, password } = req.body;

        console.log('\nüîë –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', email);

        if (!email || !password) {
            return res.status(400).json({ error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        if (!validateEmail(email)) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' });
        }

        const users = readData(usersFile);
        const user = users.find(u => u.email.toLowerCase() === email.toLowerCase());

        if (!user) {
            return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const validPassword = await bcrypt.compare(password, user.password);
        if (!validPassword) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        user.online = true;
        user.lastSeen = Date.now();
        writeData(usersFile, users);

        const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: '30d' });

        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', user.username);

        res.json({
            success: true,
            token,
            user: {
                id: user.id,
                email: user.email,
                name: user.name,
                username: user.username,
                avatar: user.avatar,
                bio: user.bio,
                status: user.status
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// 4. –ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô (–° –ü–†–û–í–ï–†–ö–û–ô –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø)
app.get('/api/users/search', (req, res) => {
    try {
        const { query } = req.query;

        if (!query || query.trim().length < 2) {
            return res.json({ users: [] });
        }

        const users = readData(usersFile);
        const currentUserId = req.headers['user-id'];

        const results = users
            .filter(u => {
                if (u.id === currentUserId) return false;

                const searchQuery = query.toLowerCase();
                return (
                    u.email.toLowerCase().includes(searchQuery) ||
                    u.username.toLowerCase().includes(searchQuery) ||
                    u.name.toLowerCase().includes(searchQuery)
                );
            })
            .map(u => ({
                id: u.id,
                name: u.name,
                username: u.username,
                email: u.email,
                avatar: u.avatar,
                online: u.online,
                verified: u.verified
            }))
            .slice(0, 20);

        console.log(`üîç –ü–æ–∏—Å–∫ "${query}": –Ω–∞–π–¥–µ–Ω–æ ${results.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

        res.json({ users: results });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// 5. –ü–û–õ–£–ß–ò–¢–¨ –ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
app.get('/api/users/:userId', (req, res) => {
    try {
        const { userId } = req.params;
        const users = readData(usersFile);
        const user = users.find(u => u.id === userId);

        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        res.json({
            id: user.id,
            name: user.name,
            username: user.username,
            email: user.settings.showEmail ? user.email : null,
            phone: user.settings.showPhone ? user.phone : null,
            avatar: user.avatar,
            bio: user.bio,
            status: user.status,
            online: user.online,
            lastSeen: user.settings.showLastSeen ? user.lastSeen : null,
            verified: user.verified,
            businessAccount: user.businessAccount,
            city: user.city,
            country: user.country,
            socialLinks: user.socialLinks
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// 6. –°–û–ó–î–ê–¢–¨ –ß–ê–¢ (–° –ü–†–û–í–ï–†–ö–û–ô –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø)
app.post('/api/chats/create', (req, res) => {
    try {
        const { userId, contactId } = req.body;

        if (!userId || !contactId) {
            return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
        }

        if (userId === contactId) {
            return res.status(400).json({ error: '–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç —Å —Å–∞–º–∏–º —Å–æ–±–æ–π' });
        }

        const users = readData(usersFile);
        
        const user = users.find(u => u.id === userId);
        const contact = users.find(u => u.id === contactId);

        if (!user) {
            return res.status(404).json({ error: '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        if (!contact) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.' });
        }

        const chats = readData(chatsFile);

        const existingChat = chats.find(c => 
            (c.user1 === userId && c.user2 === contactId) ||
            (c.user1 === contactId && c.user2 === userId)
        );

        if (existingChat) {
            console.log('üí¨ –ß–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', existingChat.id);
            return res.json({ 
                chatId: existingChat.id, 
                chat: existingChat,
                message: '–ß–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            });
        }

        const newChat = {
            id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
            user1: userId,
            user2: contactId,
            createdAt: Date.now(),
            lastMessage: null,
            lastMessageTime: null,
            unreadCount: {
                [userId]: 0,
                [contactId]: 0
            }
        };

        chats.push(newChat);
        writeData(chatsFile, chats);

        console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç:', newChat.id);

        res.json({ 
            chatId: newChat.id, 
            chat: newChat,
            message: '–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// 7. –ü–û–õ–£–ß–ò–¢–¨ –ß–ê–¢–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
app.get('/api/chats/:userId', (req, res) => {
    try {
        const { userId } = req.params;
        const chats = readData(chatsFile);
        const users = readData(usersFile);

        const userChats = chats
            .filter(c => c.user1 === userId || c.user2 === userId)
            .map(chat => {
                const contactId = chat.user1 === userId ? chat.user2 : chat.user1;
                const contact = users.find(u => u.id === contactId);

                if (!contact) return null;

                return {
                    id: chat.id,
                    contact: {
                        id: contact.id,
                        name: contact.name,
                        username: contact.username,
                        avatar: contact.avatar,
                        online: contact.online,
                        lastSeen: contact.lastSeen
                    },
                    lastMessage: chat.lastMessage,
                    lastMessageTime: chat.lastMessageTime,
                    unreadCount: chat.unreadCount[userId] || 0
                };
            })
            .filter(c => c !== null)
            .sort((a, b) => (b.lastMessageTime || 0) - (a.lastMessageTime || 0));

        res.json({ chats: userChats });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// 8. –ü–û–õ–£–ß–ò–¢–¨ –°–û–û–ë–©–ï–ù–ò–Ø –ß–ê–¢–ê
app.get('/api/messages/:chatId', (req, res) => {
    try {
        const { chatId } = req.params;
        const messages = readData(messagesFile);

        const chatMessages = messages[chatId] || [];

        res.json({ messages: chatMessages });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// 9. –û–¢–ü–†–ê–í–ò–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï
app.post('/api/messages/send', (req, res) => {
    try {
        const { chatId, senderId, text } = req.body;

        if (!chatId || !senderId || !text || text.trim() === '') {
            return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        const messages = readData(messagesFile);
        if (!messages[chatId]) messages[chatId] = [];

        const newMessage = {
            id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
            chatId,
            senderId,
            text: text.trim(),
            timestamp: Date.now(),
            status: 'sent',
            read: false,
            edited: false,
            deleted: false
        };

        messages[chatId].push(newMessage);
        writeData(messagesFile, messages);

        const chats = readData(chatsFile);
        const chat = chats.find(c => c.id === chatId);
        if (chat) {
            chat.lastMessage = text.trim();
            chat.lastMessageTime = Date.now();
            
            const receiverId = chat.user1 === senderId ? chat.user2 : chat.user1;
            chat.unreadCount[receiverId] = (chat.unreadCount[receiverId] || 0) + 1;
            
            writeData(chatsFile, chats);
        }

        io.to(chatId).emit('new_message', newMessage);

        console.log('üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', newMessage.id);

        res.json({ success: true, message: newMessage });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// 10. –í–´–•–û–î –ò–ó –ê–ö–ö–ê–£–ù–¢–ê
app.post('/api/auth/logout', (req, res) => {
    try {
        const { userId } = req.body;

        const users = readData(usersFile);
        const user = users.find(u => u.id === userId);

        if (user) {
            user.online = false;
            user.lastSeen = Date.now();
            writeData(usersFile, users);
            console.log('üëã –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞:', user.username);
        }

        res.json({ success: true, message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω' });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// ============================================
// WEBSOCKET
// ============================================

io.on('connection', (socket) => {
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:', socket.id);

    socket.on('join_chat', (chatId) => {
        socket.join(chatId);
        console.log(`üì® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É: ${chatId}`);
    });

    socket.on('typing', (data) => {
        socket.to(data.chatId).emit('user_typing', {
            userId: data.userId,
            username: data.username
        });
    });

    socket.on('stop_typing', (data) => {
        socket.to(data.chatId).emit('user_stop_typing', {
            userId: data.userId
        });
    });

    socket.on('disconnect', () => {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', socket.id);
    });
});

// –£–î–ê–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô
app.post('/api/messages/delete', async (req, res) => {
    try {
        const { messageId, userId, deleteType } = req.body;
        const messages = readData(messagesFile);
        
        for (const chatId in messages) {
            const chatMessages = messages[chatId];
            const messageIndex = chatMessages.findIndex(m => m.id === messageId);
            
            if (messageIndex !== -1) {
                if (deleteType === 'forEveryone') {
                    chatMessages.splice(messageIndex, 1);
                } else {
                    chatMessages[messageIndex].deletedFor = chatMessages[messageIndex].deletedFor || [];
                    chatMessages[messageIndex].deletedFor.push(userId);
                }
                writeData(messagesFile, messages);
                return res.json({ success: true });
            }
        }
        
        res.status(404).json({ error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –†–ï–ê–ö–¶–ò–ò –ù–ê –°–û–û–ë–©–ï–ù–ò–Ø
app.post('/api/messages/reaction', async (req, res) => {
    try {
        const { messageId, userId, emoji } = req.body;
        const messages = readData(messagesFile);
        
        for (const chatId in messages) {
            const message = messages[chatId].find(m => m.id === messageId);
            if (message) {
                message.reactions = message.reactions || {};
                message.reactions[emoji] = message.reactions[emoji] || [];
                
                const index = message.reactions[emoji].indexOf(userId);
                if (index > -1) {
                    message.reactions[emoji].splice(index, 1);
                    if (message.reactions[emoji].length === 0) {
                        delete message.reactions[emoji];
                    }
                } else {
                    message.reactions[emoji].push(userId);
                }
                
                writeData(messagesFile, messages);
                return res.json({ success: true, reactions: message.reactions });
            }
        }
        
        res.status(404).json({ error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–†–û–ß–¢–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô
app.post('/api/messages/read', async (req, res) => {
    try {
        const { chatId, userId } = req.body;
        const messages = readData(messagesFile);
        const chats = readData(chatsFile);
        
        if (messages[chatId]) {
            messages[chatId].forEach(msg => {
                if (msg.senderId !== userId) {
                    msg.status = 'read';
                    msg.read = true;
                }
            });
            writeData(messagesFile, messages);
        }
        
        const chat = chats.find(c => c.id === chatId);
        if (chat && chat.unreadCount) {
            chat.unreadCount[userId] = 0;
            writeData(chatsFile, chats);
        }
        
        res.json({ success: true });
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = 3000;
server.listen(PORT, () => {
    console.log(`
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                       ‚ïë
    ‚ïë   üöÄ VibeChat Server –∑–∞–ø—É—â–µ–Ω!        ‚ïë
    ‚ïë                                       ‚ïë
    ‚ïë   üåê http://localhost:${PORT}            ‚ïë
    ‚ïë                                       ‚ïë
    ‚ïë   üìÅ –î–∞–Ω–Ω—ã–µ: ./data/                  ‚ïë
    ‚ïë   üìß Email: –ö–æ–Ω—Å–æ–ª—å (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)‚ïë
    ‚ïë   üîå WebSocket: –ê–∫—Ç–∏–≤–µ–Ω               ‚ïë
    ‚ïë                                       ‚ïë
    ‚ïë   ‚ö†Ô∏è  –ö–æ–¥—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏!    ‚ïë
    ‚ïë                                       ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    `);
});