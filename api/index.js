const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const cors = require('cors');
const path = require('path');

const app = express();
const server = http.createServer(app);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Socket.io –¥–ª—è Vercel (—Ç–æ–ª—å–∫–æ polling)
const io = socketIo(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"]
    },
    transports: ['polling', 'websocket'],
    allowEIO3: true,
    pingTimeout: 60000,
    pingInterval: 25000
});

// Middleware
app.use(express.json());
app.use(cors());
app.use(express.static(path.join(__dirname, '../public')));

// JWT Secret
const JWT_SECRET = process.env.JWT_SECRET || 'vibechat_secret_key_2025_ultra_secure';

// In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
// ‚ö†Ô∏è –í–ê–ñ–ù–û: –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Ç–µ—Ä—è—Ç—å—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –¥–µ–ø–ª–æ–µ!
// –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ MongoDB –∏–ª–∏ –¥—Ä—É–≥—É—é –ë–î
let users = [];
let messages = [];
let chats = [];
let codes = [];

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
function generateCode() {
    return Math.floor(100000 + Math.random() * 900000).toString();
}

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ username
function validateUsername(username) {
    const usernameRegex = /^[a-zA-Z0-9_]{5,20}$/;
    return usernameRegex.test(username);
}

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email
function validateEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

// ============================================
// API ENDPOINTS
// ============================================

// 1. –û–¢–ü–†–ê–í–ö–ê –ö–û–î–ê –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò
app.post('/api/auth/send-code', async (req, res) => {
    try {
        const { email } = req.body;

        if (!email || !validateEmail(email)) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingUser = users.find(u => u.email === email);
        if (existingUser) {
            return res.status(400).json({ error: 'Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' });
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
        const code = generateCode();
        codes.push({
            email,
            code,
            expires: Date.now() + 10 * 60 * 1000 // 10 –º–∏–Ω—É—Ç
        });

        console.log(`üìß –ö–æ–¥ –¥–ª—è ${email}: ${code}`);

        res.json({
            success: true,
            message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å)',
            devCode: code // –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// 2. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞
app.post('/api/auth/register/verify', async (req, res) => {
    try {
        const { email, code: userCode } = req.body;

        if (!email || !userCode) {
            return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
        }

        // –ü–æ–∏—Å–∫ –∫–æ–¥–∞
        const codeEntry = codes.find(c => c.email === email);
        
        if (!codeEntry) {
            return res.status(400).json({ error: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        if (codeEntry.expires < Date.now()) {
            return res.status(400).json({ error: '–ö–æ–¥ –∏—Å—Ç–µ–∫' });
        }

        if (codeEntry.code !== userCode) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥' });
        }

        res.json({ success: true, message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// 3. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
app.post('/api/auth/register/complete', async (req, res) => {
    try {
        const { email, name, username, password } = req.body;

        if (!email || !name || !username || !password) {
            return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        if (!validateUsername(username)) {
            return res.status(400).json({ error: 'Username –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5-20 —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _)' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ username
        const existingUsername = users.find(u => u.username === username);
        if (existingUsername) {
            return res.status(400).json({ error: 'Username —É–∂–µ –∑–∞–Ω—è—Ç' });
        }

        // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
        const hashedPassword = await bcrypt.hash(password, 10);

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUser = {
            id: Date.now().toString(),
            email,
            name,
            username,
            password: hashedPassword,
            avatar: null,
            bio: '',
            phone: '',
            status: '–ü—Ä–∏–≤–µ—Ç! –Ø –∏—Å–ø–æ–ª—å–∑—É—é VibeChat üöÄ',
            online: false,
            lastSeen: null,
            verified: false,
            businessAccount: false,
            city: '',
            country: '',
            socialLinks: []
        };

        users.push(newUser);

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
        const token = jwt.sign({ userId: newUser.id }, JWT_SECRET, { expiresIn: '30d' });

        res.json({
            success: true,
            message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
            token,
            user: {
                id: newUser.id,
                email: newUser.email,
                name: newUser.name,
                username: newUser.username,
                avatar: newUser.avatar
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// 4. –í–•–û–î
app.post('/api/auth/login', async (req, res) => {
    try {
        const { username, password } = req.body;

        if (!username || !password) {
            return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = users.find(u => u.username === username || u.email === username);
        
        if (!user) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
        const isPasswordValid = await bcrypt.compare(password, user.password);
        
        if (!isPasswordValid) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
        const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: '30d' });

        res.json({
            success: true,
            token,
            user: {
                id: user.id,
                email: user.email,
                name: user.name,
                username: user.username,
                avatar: user.avatar,
                bio: user.bio,
                status: user.status
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// 5. –ü–û–õ–£–ß–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø
app.get('/api/auth/profile', async (req, res) => {
    try {
        const token = req.headers.authorization?.replace('Bearer ', '');
        
        if (!token) {
            return res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
        }

        const decoded = jwt.verify(token, JWT_SECRET);
        const user = users.find(u => u.id === decoded.userId);

        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        res.json({
            id: user.id,
            email: user.email,
            name: user.name,
            username: user.username,
            avatar: user.avatar,
            bio: user.bio,
            phone: user.phone,
            status: user.status,
            online: user.online,
            lastSeen: user.lastSeen,
            verified: user.verified,
            businessAccount: user.businessAccount,
            city: user.city,
            country: user.country,
            socialLinks: user.socialLinks
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// 6. –°–û–ó–î–ê–¢–¨ –ß–ê–¢ (–° –ü–†–û–í–ï–†–ö–û–ô –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø)
app.post('/api/chats/create', async (req, res) => {
    try {
        const { userId, contactId } = req.body;

        if (!userId || !contactId) {
            return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
        }

        if (userId === contactId) {
            return res.status(400).json({ error: '–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç —Å —Å–∞–º–∏–º —Å–æ–±–æ–π' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const user = users.find(u => u.id === userId);
        const contact = users.find(u => u.id === contactId);

        if (!user || !contact) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞
        const existingChat = chats.find(c => 
            (c.participants.includes(userId) && c.participants.includes(contactId)) &&
            c.type === 'private'
        );

        if (existingChat) {
            return res.json({ chatId: existingChat.id });
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
        const newChat = {
            id: Date.now().toString(),
            type: 'private',
            participants: [userId, contactId],
            createdAt: Date.now(),
            lastMessage: null,
            unreadCount: {}
        };

        newChat.unreadCount[userId] = 0;
        newChat.unreadCount[contactId] = 0;

        chats.push(newChat);

        res.json({ chatId: newChat.id });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// 7. –ü–û–õ–£–ß–ò–¢–¨ –ß–ê–¢–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
app.get('/api/chats/:userId', async (req, res) => {
    try {
        const { userId } = req.params;

        const userChats = chats.filter(c => c.participants.includes(userId));

        res.json(userChats);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// 8. –ü–û–õ–£–ß–ò–¢–¨ –°–û–û–ë–©–ï–ù–ò–Ø –ß–ê–¢–ê
app.get('/api/messages/:chatId', async (req, res) => {
    try {
        const { chatId } = req.params;

        const chatMessages = messages.filter(m => m.chatId === chatId);

        res.json(chatMessages);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// 9. –ü–†–û–ß–ò–¢–ê–¢–¨ –°–û–û–ë–©–ï–ù–ò–Ø
app.post('/api/chats/:chatId/read', async (req, res) => {
    try {
        const { chatId } = req.params;
        const { userId } = req.body;

        const chat = chats.find(c => c.id === chatId);
        
        if (!chat) {
            return res.status(404).json({ error: '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        if (chat.unreadCount) {
            chat.unreadCount[userId] = 0;
        }

        res.json({ success: true });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// ============================================
// SOCKET.IO EVENTS
// ============================================

io.on('connection', (socket) => {
    console.log('üîå –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', socket.id);

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω
    socket.on('user:online', (userId) => {
        const user = users.find(u => u.id === userId);
        if (user) {
            user.online = true;
            user.lastSeen = null;
            io.emit('user:status', { userId, online: true });
        }
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    socket.on('message:send', (data) => {
        const newMessage = {
            id: Date.now().toString(),
            chatId: data.chatId,
            senderId: data.senderId,
            text: data.text,
            timestamp: Date.now(),
            read: false,
            type: data.type || 'text',
            mediaUrl: data.mediaUrl || null
        };

        messages.push(newMessage);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
        const chat = chats.find(c => c.id === data.chatId);
        if (chat) {
            chat.lastMessage = newMessage;
            
            // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            chat.participants.forEach(participantId => {
                if (participantId !== data.senderId) {
                    chat.unreadCount[participantId] = (chat.unreadCount[participantId] || 0) + 1;
                }
            });
        }

        io.emit('message:new', newMessage);
    });

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    socket.on('disconnect', () => {
        console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ:', socket.id);
    });
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Vercel
module.exports = app;
module.exports.io = io;
module.exports.server = server;
