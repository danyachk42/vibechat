// –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
const API_URL = 'http://localhost:3000/api';
let socket;
let currentUser = null;
let currentChat = null;
let chats = [];
let typingTimeout;

const emojis = {
    all: ['üòÄ','üòÉ','üòÑ','üòÅ','üòÜ','üòÖ','ü§£','üòÇ','üôÇ','üôÉ','üòâ','üòä','üòá','ü•∞','üòç','ü§©','üòò','üòó','‚ò∫Ô∏è','üòö','üòô','ü•≤','üòã','üòõ','üòú','ü§™','üòù','ü§ë','ü§ó','ü§≠','ü§´','ü§î','ü§ê','ü§®','üòê','üòë','üò∂','üòè','üòí','üôÑ','üò¨','ü§•','üòå','üòî','üò™','ü§§','üò¥','üò∑','ü§í','ü§ï','ü§¢','ü§Æ','ü§ß','ü•µ','ü•∂','ü•¥','üòµ','ü§Ø','ü§†','ü•≥','ü•∏','üòé','ü§ì','üßê','üòï','üòü','üôÅ','‚òπÔ∏è','üòÆ','üòØ','üò≤','üò≥','ü•∫','üò¶','üòß','üò®','üò∞','üò•','üò¢','üò≠','üò±','üòñ','üò£','üòû','üòì','üò©','üò´','ü•±','üò§','üò°','üò†','ü§¨','üòà','üëø','üíÄ','‚ò†Ô∏è','üí©','ü§°','üëπ','üë∫','üëª','üëΩ','üëæ','ü§ñ','‚ù§Ô∏è','üß°','üíõ','üíö','üíô','üíú','üñ§','ü§ç','ü§é','üíî','‚ù£Ô∏è','üíï','üíû','üíì','üíó','üíñ','üíò','üíù','üëç','üëé','üëä','‚úä','ü§õ','ü§ú','ü§û','‚úåÔ∏è','ü§ü','ü§ò','üëå','ü§å','ü§è','üëà','üëâ','üëÜ','üëá','‚òùÔ∏è','‚úã','ü§ö','üñêÔ∏è','üññ','üëã','ü§ô','üí™'],
    smileys: ['üòÄ','üòÉ','üòÑ','üòÅ','üòÜ','üòÖ','ü§£','üòÇ','üôÇ','üôÉ','üòâ','üòä','üòá','ü•∞','üòç','ü§©','üòò','üòó','‚ò∫Ô∏è','üòö','üòô','ü•≤','üòã','üòõ','üòú','ü§™','üòù','ü§ë','ü§ó','ü§≠','ü§´','ü§î','ü§ê','ü§®','üòê','üòë','üò∂','üòè','üòí','üôÑ','üò¨','ü§•'],
    animals: ['üê∂','üê±','üê≠','üêπ','üê∞','ü¶ä','üêª','üêº','üê®','üêØ','ü¶Å','üêÆ','üê∑','üêΩ','üê∏','üêµ','üôà','üôâ','üôä','üêí','üêî','üêß','üê¶','üê§','üê£','üê•','ü¶Ü','ü¶Ö','ü¶â','ü¶á','üê∫','üêó','üê¥','ü¶Ñ','üêù','üêõ','ü¶ã','üêå','üêû','üêú'],
    food: ['üçá','üçà','üçâ','üçä','üçã','üçå','üçç','ü•≠','üçé','üçè','üçê','üçë','üçí','üçì','ü•ù','üçÖ','ü••','ü•ë','üçÜ','ü•î','ü•ï','üåΩ','üå∂Ô∏è','ü•í','ü•¨','ü•¶','üßÑ','üßÖ','üçÑ','ü•ú','üå∞','üçû','ü•ê','ü•ñ','ü•®','ü•Ø','ü•û','üßá','üßÄ','üçñ','üçó','ü•©','ü•ì','üçî','üçü','üçï'],
    activities: ['‚öΩ','üèÄ','üèà','‚öæ','ü•é','üéæ','üèê','üèâ','ü•è','üé±','ü™Ä','üèì','üè∏','üèí','üèë','ü•ç','üèè','ü•Ö','‚õ≥','ü™Å','üèπ','üé£','ü§ø','ü•ä','ü•ã','üéΩ','üõπ','üõ∑','‚õ∏Ô∏è','ü•å','üéø','‚õ∑Ô∏è','üèÇ','ü™Ç'],
    travel: ['üöó','üöï','üöô','üöå','üöé','üèéÔ∏è','üöì','üöë','üöí','üöê','üöö','üöõ','üöú','ü¶Ø','ü¶Ω','ü¶º','üõ¥','üö≤','üõµ','üèçÔ∏è','üõ∫','üö®','üöî','üöç','üöò','üöñ','üö°','üö†','üöü','üöÉ','üöã','üöû','üöù','üöÑ','üöÖ','üöà','üöÇ','üöÜ','üöá','üöä','üöâ','‚úàÔ∏è'],
    objects: ['‚åö','üì±','üì≤','üíª','‚å®Ô∏è','üñ•Ô∏è','üñ®Ô∏è','üñ±Ô∏è','üñ≤Ô∏è','üïπÔ∏è','üóúÔ∏è','üíæ','üíø','üìÄ','üìº','üì∑','üì∏','üìπ','üé•','üìΩÔ∏è','üéûÔ∏è','üìû','‚òéÔ∏è','üìü','üì†','üì∫','üìª','üéôÔ∏è','üéöÔ∏è','üéõÔ∏è','üß≠','‚è±Ô∏è','‚è≤Ô∏è','‚è∞','üï∞Ô∏è','‚åõ','‚è≥','üì°','üîã','üîå','üí°','üî¶'],
    symbols: ['‚ù§Ô∏è','üß°','üíõ','üíö','üíô','üíú','üñ§','ü§ç','ü§é','üíî','‚ù£Ô∏è','üíï','üíû','üíì','üíó','üíñ','üíò','üíù','üíü','‚òÆÔ∏è','‚úùÔ∏è','‚ò™Ô∏è','üïâÔ∏è','‚ò∏Ô∏è','‚ú°Ô∏è','üîØ','üïé','‚òØÔ∏è','‚ò¶Ô∏è','üõê','‚õé','‚ôà','‚ôâ','‚ôä','‚ôã','‚ôå','‚ôç','‚ôé','‚ôè','‚ôê','‚ôë','‚ôí','‚ôì']
};

document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ VibeChat –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');
    checkAuth();
    initEventListeners();
    initEmojiPicker();
});

function checkAuth() {
    const token = localStorage.getItem('vibechat_token');
    const user = localStorage.getItem('vibechat_user');
    
    if (token && user) {
        try {
            currentUser = JSON.parse(user);
            showApp();
        } catch (error) {
            localStorage.clear();
        }
    }
}

function initEventListeners() {
    document.getElementById('registerForm').addEventListener('submit', handleRegister);
    document.getElementById('loginForm').addEventListener('submit', handleLogin);
    
    const codeInputs = document.querySelectorAll('.code-input');
    codeInputs.forEach((input, index) => {
        input.addEventListener('input', function() {
            this.value = this.value.replace(/[^0-9]/g, '');
            if (this.value.length === 1 && index < codeInputs.length - 1) {
                codeInputs[index + 1].focus();
            }
        });
        input.addEventListener('keydown', function(e) {
            if (e.key === 'Backspace' && this.value === '' && index > 0) {
                codeInputs[index - 1].focus();
            }
        });
    });
    
    document.getElementById('contactSearch').addEventListener('input', debounce(searchContacts, 500));
    document.getElementById('chatSearchInput').addEventListener('input', function() {
        filterChats(this.value.toLowerCase());
    });
    
    const messageInput = document.getElementById('messageInput');
    messageInput.addEventListener('input', function() {
        this.style.height = 'auto';
        this.style.height = Math.min(this.scrollHeight, 120) + 'px';
        
        const sendBtn = document.getElementById('sendBtn');
        const voiceBtn = document.getElementById('voiceBtn');
        if (this.value.trim()) {
            sendBtn.style.display = 'flex';
            voiceBtn.style.display = 'none';
        } else {
            sendBtn.style.display = 'none';
            voiceBtn.style.display = 'flex';
        }
        
        if (currentChat && socket) {
            socket.emit('typing', {
                chatId: currentChat.id,
                userId: currentUser.id,
                username: currentUser.name
            });
            clearTimeout(typingTimeout);
            typingTimeout = setTimeout(() => {
                socket.emit('stop_typing', { chatId: currentChat.id, userId: currentUser.id });
            }, 1000);
        }
    });
    
    messageInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            if (!isMessageSending) sendMessage();
        }
    });
    
    document.getElementById('emojiSearch').addEventListener('input', function() {
        filterEmojisBySearch(this.value.toLowerCase());
    });
}

function showApp() {
    document.getElementById('registerModal').classList.remove('active');
    document.getElementById('verifyModal').classList.remove('active');
    document.getElementById('loginModal').classList.remove('active');
    document.getElementById('app').classList.remove('hidden');

    socket = io('http://localhost:3000');
    socket.on('connect', () => console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω'));
    socket.on('new_message', (message) => {
        if (currentChat && message.chatId === currentChat.id) {
            addMessageToUI(message);
        }
        updateChatPreview(message);
    });
    socket.on('user_typing', (data) => {
        if (currentChat && data.userId !== currentUser.id) {
            showTypingIndicator(data.username);
        }
    });
    socket.on('user_stop_typing', (data) => {
        if (currentChat && data.userId !== currentUser.id) {
            hideTypingIndicator();
        }
    });
    socket.on('message_deleted', (data) => {
        const messageEl = document.querySelector(`[data-message-id="${data.messageId}"]`);
        if (messageEl) {
            messageEl.style.animation = 'messageSlideOut 0.3s ease';
            setTimeout(() => messageEl.remove(), 300);
        }
    });

    updateUserProfile();
    loadChats();
}

function updateUserProfile() {
    document.getElementById('userName').textContent = currentUser.name;
    document.getElementById('userStatus').textContent = currentUser.status || '–ü—Ä–∏–≤–µ—Ç! –Ø –∏—Å–ø–æ–ª—å–∑—É—é VibeChat üëã';
    document.getElementById('userAvatarText').textContent = currentUser.name[0].toUpperCase();
    
    if (currentUser.avatarUrl) {
        document.getElementById('userAvatarImg').src = currentUser.avatarUrl;
        document.getElementById('userAvatarImg').style.display = 'block';
        document.getElementById('userAvatarText').style.display = 'none';
    }
}

async function loadChats() {
    try {
        const response = await fetch(`${API_URL}/chats/${currentUser.id}`, {
            headers: { 'Authorization': `Bearer ${localStorage.getItem('vibechat_token')}` }
        });
        const data = await response.json();
        chats = data.chats || [];
        renderChats(chats);
    } catch (error) {
        showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤', 'error');
    }
}

function renderChats(chatsToRender) {
    const chatsList = document.getElementById('chatsList');
    
    if (chatsToRender.length === 0) {
        chatsList.innerHTML = `
            <div style="padding: 40px 24px; text-align: center; color: var(--text-secondary);">
                <i class="fas fa-inbox" style="font-size: 48px; opacity: 0.3; margin-bottom: 16px;"></i>
                <p style="font-size: 16px; font-weight: 600;">–ù–µ—Ç —á–∞—Ç–æ–≤</p>
                <p style="font-size: 13px; margin-top: 8px;">–ù–∞–∂–º–∏—Ç–µ + —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ</p>
            </div>
        `;
        return;
    }

    chatsList.innerHTML = chatsToRender.map(chat => {
        const isGroup = chat.type === 'group';
        const isChannel = chat.type === 'channel';
        const avatarClass = isGroup ? 'group' : (isChannel ? 'channel' : '');
        const badgeIcon = isGroup ? '<i class="fas fa-users chat-badge-icon"></i>' : (isChannel ? '<i class="fas fa-bullhorn chat-badge-icon"></i>' : '');
        
        return `
            <div class="chat-item ${currentChat && currentChat.id === chat.id ? 'active' : ''}" 
                 onclick="openChat('${chat.id}')"
                 oncontextmenu="showChatContextMenu(event, '${chat.id}')">
                <div class="chat-avatar ${avatarClass} ${chat.contact?.online ? 'online' : ''}">
                    ${chat.contact?.avatar || chat.name?.[0]?.toUpperCase() || 'G'}
                </div>
                <div class="chat-info">
                    <div class="chat-header">
                        <div class="chat-name">
                            ${badgeIcon}
                            ${chat.contact?.name || chat.name || '–ì—Ä—É–ø–ø–∞'}
                        </div>
                        <div class="chat-time">${chat.lastMessageTime ? formatTime(chat.lastMessageTime) : ''}</div>
                    </div>
                    <div class="chat-preview">${chat.lastMessage || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'}</div>
                </div>
                ${chat.unreadCount > 0 ? `<div class="chat-badge">${chat.unreadCount}</div>` : ''}
            </div>
        `;
    }).join('');
}

function showChatContextMenu(event, chatId) {
    event.preventDefault();
    event.stopPropagation();
    
    const items = [
        { icon: 'fa-thumbtack', label: '–ó–∞–∫—Ä–µ–ø–∏—Ç—å', action: `pinChat('${chatId}')` },
        { icon: 'fa-archive', label: '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å', action: `archiveChat('${chatId}')` },
        { icon: 'fa-bell-slash', label: '–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', action: `muteChat('${chatId}')` },
        { divider: true },
        { icon: 'fa-trash', label: '–£–¥–∞–ª–∏—Ç—å —á–∞—Ç', action: `deleteChat('${chatId}')`, danger: true }
    ];
    
    createContextMenu(event.pageX, event.pageY, items);
}

function pinChat(chatId) {
    showToast('üìå –ß–∞—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω', 'success');
}

function archiveChat(chatId) {
    showToast('üì¶ –ß–∞—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω', 'success');
}

function muteChat(chatId) {
    showToast('üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã', 'success');
}

function deleteChat(chatId) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç?')) {
        chats = chats.filter(c => c.id !== chatId);
        renderChats(chats);
        showToast('‚úÖ –ß–∞—Ç —É–¥–∞–ª–µ–Ω', 'success');
    }
}

async function openChat(chatId) {
    const chat = chats.find(c => c.id === chatId);
    if (!chat) return;

    currentChat = chat;

    document.getElementById('emptyState').classList.add('hidden');
    document.getElementById('activeChat').classList.remove('hidden');

    const chatName = chat.contact?.name || chat.name || '–ì—Ä—É–ø–ø–∞';
    document.getElementById('activeChatName').textContent = chatName;
    
    // –ö–ª–∏–∫ –ø–æ –∏–º–µ–Ω–∏ —á–∞—Ç–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å
    document.getElementById('activeChatName').style.cursor = 'pointer';
    document.getElementById('activeChatName').onclick = () => {
        if (chat.contact?.id) {
            openUserProfile(chat.contact.id);
        }
    };
    
    const avatarText = chat.contact?.avatar || chat.name?.[0]?.toUpperCase() || 'G';
    document.getElementById('activeChatAvatarText').textContent = avatarText;
    
    if (chat.contact?.avatarUrl) {
        document.getElementById('activeChatAvatarImg').src = chat.contact.avatarUrl;
        document.getElementById('activeChatAvatarImg').style.display = 'block';
        document.getElementById('activeChatAvatarText').style.display = 'none';
    }
    
    const statusEl = document.getElementById('activeChatStatus');
    if (chat.type === 'group') {
        statusEl.textContent = `${chat.membersCount || 0} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`;
        statusEl.classList.remove('online');
    } else if (chat.type === 'channel') {
        statusEl.textContent = `${chat.subscribersCount || 0} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤`;
        statusEl.classList.remove('online');
    } else if (chat.contact?.online) {
        statusEl.textContent = '–≤ —Å–µ—Ç–∏';
        statusEl.classList.add('online');
    } else {
        statusEl.textContent = chat.contact?.lastSeen ? `–±—ã–ª(–∞) ${formatTime(chat.contact.lastSeen)}` : '–±—ã–ª(–∞) –Ω–µ–¥–∞–≤–Ω–æ';
        statusEl.classList.remove('online');
    }

    if (socket) socket.emit('join_chat', chatId);
    await loadMessages(chatId);
    renderChats(chats);
}

function toggleCreateMenu() {
    document.getElementById('createMenu').classList.toggle('active');
}

function openAddContact() {
    document.getElementById('createMenu').classList.remove('active');
    document.getElementById('addContactModal').classList.add('active');
    document.getElementById('contactSearch').value = '';
    document.getElementById('searchResults').innerHTML = '';
}

function closeAddContact() {
    document.getElementById('addContactModal').classList.remove('active');
}

async function searchContacts() {
    const query = document.getElementById('contactSearch').value.trim();
    const resultsDiv = document.getElementById('searchResults');

    if (query.length < 2) {
        resultsDiv.innerHTML = '';
        return;
    }

    try {
        const response = await fetch(`${API_URL}/users/search?query=${encodeURIComponent(query)}`, {
            headers: {
                'user-id': currentUser.id,
                'Authorization': `Bearer ${localStorage.getItem('vibechat_token')}`
            }
        });

        const data = await response.json();
        const users = data.users || [];

        if (users.length === 0) {
            resultsDiv.innerHTML = '<p style="text-align: center; color: var(--text-secondary); padding: 20px;">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
            return;
        }

        resultsDiv.innerHTML = users.map(user => `
            <div class="chat-item" onclick="createChatWithUser('${user.id}')">
                <div class="chat-avatar ${user.online ? 'online' : ''}">
                    ${user.avatar || user.name[0].toUpperCase()}
                </div>
                <div class="chat-info">
                    <div class="chat-name">${user.name}</div>
                    <div class="chat-preview">@${user.username}</div>
                </div>
            </div>
        `).join('');
    } catch (error) {
        showToast('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'error');
    }
}

async function createChatWithUser(contactId) {
    try {
        const response = await fetch(`${API_URL}/chats/create`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('vibechat_token')}`
            },
            body: JSON.stringify({ userId: currentUser.id, contactId: contactId })
        });

        const data = await response.json();

        if (response.ok) {
            closeAddContact();
            showToast('‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω!', 'success');
            await loadChats();
            openChat(data.chatId);
        } else {
            showToast(data.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞', 'error');
        }
    } catch (error) {
        showToast('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞', 'error');
    }
}

function filterChats(query) {
    if (!query) {
        renderChats(chats);
        return;
    }

    const filtered = chats.filter(chat => {
        const name = chat.contact?.name || chat.name || '';
        const username = chat.contact?.username || '';
        const lastMessage = chat.lastMessage || '';
        
        return name.toLowerCase().includes(query) ||
               username.toLowerCase().includes(query) ||
               lastMessage.toLowerCase().includes(query);
    });

    renderChats(filtered);
}

function showTypingIndicator(username) {
    const indicator = document.getElementById('typingIndicator');
    document.getElementById('typingUsername').textContent = `${username} –ø–µ—á–∞—Ç–∞–µ—Ç...`;
    indicator.classList.add('active');
}

function hideTypingIndicator() {
    document.getElementById('typingIndicator').classList.remove('active');
}

function updateChatPreview(message) {
    const chat = chats.find(c => c.id === message.chatId);
    if (chat) {
        chat.lastMessage = message.text || '–ú–µ–¥–∏–∞';
        chat.lastMessageTime = message.timestamp;
        if (message.senderId !== currentUser.id) {
            chat.unreadCount = (chat.unreadCount || 0) + 1;
        }
        renderChats(chats);
    }
}

function initEmojiPicker() {
    const emojiGrid = document.getElementById('emojiGrid');
    emojiGrid.innerHTML = emojis.all.map(emoji => 
        `<div class="emoji-item" onclick="insertEmoji('${emoji}')">${emoji}</div>`
    ).join('');
}

function toggleEmojiPicker() {
    document.getElementById('emojiPicker').classList.toggle('active');
}

function filterEmojis(category) {
    document.querySelectorAll('.emoji-category').forEach(cat => cat.classList.remove('active'));
    event.target.classList.add('active');
    
    const emojiGrid = document.getElementById('emojiGrid');
    const emojisToShow = emojis[category] || emojis.all;
    emojiGrid.innerHTML = emojisToShow.map(emoji => 
        `<div class="emoji-item" onclick="insertEmoji('${emoji}')">${emoji}</div>`
    ).join('');
}

function filterEmojisBySearch(query) {
    if (!query) {
        initEmojiPicker();
        return;
    }
    
    const emojiGrid = document.getElementById('emojiGrid');
    const filtered = emojis.all.filter(emoji => emoji.includes(query));
    emojiGrid.innerHTML = filtered.map(emoji => 
        `<div class="emoji-item" onclick="insertEmoji('${emoji}')">${emoji}</div>`
    ).join('');
}

function insertEmoji(emoji) {
    const input = document.getElementById('messageInput');
    const start = input.selectionStart;
    const end = input.selectionEnd;
    const text = input.value;
    input.value = text.substring(0, start) + emoji + text.substring(end);
    input.selectionStart = input.selectionEnd = start + emoji.length;
    input.focus();
    input.dispatchEvent(new Event('input'));
}

function startVoiceCall() {
    showToast('üìû –ì–æ–ª–æ—Å–æ–≤—ã–µ –∑–≤–æ–Ω–∫–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)', 'success');
}

function startVideoCall() {
    showToast('üìπ –í–∏–¥–µ–æ –∑–≤–æ–Ω–∫–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)', 'success');
}

function openChatInfo() {
    showToast('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)', 'success');
}

console.log('‚úÖ app.js –∑–∞–≥—Ä—É–∂–µ–Ω');