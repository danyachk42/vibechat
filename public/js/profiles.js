// ============================================
// –ü–†–û–§–ò–õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
// ============================================

// –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function openUserProfile(userId) {
    console.log('üë§ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    if (userId === currentUser.id) {
        openProfile();
        return;
    }
    
    try {
        const response = await fetch(`${API_URL}/users/${userId}`, {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('vibechat_token')}`
            }
        });

        const data = await response.json();
        const user = data;

        if (response.ok) {
            showUserProfileModal(user);
        } else {
            showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è', 'error');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è', 'error');
    }
}

function showUserProfileModal(user) {
    const modal = document.createElement('div');
    modal.className = 'modal active';
    modal.id = 'userProfileModal';
    
    modal.innerHTML = `
        <div class="modal-content modal-large">
            <button class="modal-close" onclick="closeUserProfile()">
                <i class="fas fa-times"></i>
            </button>
            
            <div class="profile-avatar-section">
                <div class="profile-avatar-large">
                    ${user.avatarUrl ? `<img src="${user.avatarUrl}">` : `<span>${user.name[0].toUpperCase()}</span>`}
                </div>
                <h2 style="font-size: 28px; font-weight: 700; margin-bottom: 8px;">${user.name}</h2>
                <p style="color: var(--text-secondary); font-size: 16px;">@${user.username}</p>
                ${user.verified ? '<span style="color: var(--info); font-size: 14px;"><i class="fas fa-check-circle"></i> –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</span>' : ''}
            </div>
            
            <div class="user-profile-info">
                ${user.bio ? `
                    <div class="user-info-item">
                        <i class="fas fa-info-circle"></i>
                        <div>
                            <div class="user-info-label">–û —Å–µ–±–µ</div>
                            <div class="user-info-value">${escapeHtml(user.bio)}</div>
                        </div>
                    </div>
                ` : ''}
                
                ${user.status ? `
                    <div class="user-info-item">
                        <i class="fas fa-comment"></i>
                        <div>
                            <div class="user-info-label">–°—Ç–∞—Ç—É—Å</div>
                            <div class="user-info-value">${escapeHtml(user.status)}</div>
                        </div>
                    </div>
                ` : ''}
                
                ${user.phone ? `
                    <div class="user-info-item">
                        <i class="fas fa-phone"></i>
                        <div>
                            <div class="user-info-label">–¢–µ–ª–µ—Ñ–æ–Ω</div>
                            <div class="user-info-value">${user.phone}</div>
                        </div>
                    </div>
                ` : ''}
                
                ${user.city ? `
                    <div class="user-info-item">
                        <i class="fas fa-map-marker-alt"></i>
                        <div>
                            <div class="user-info-label">–ì–æ—Ä–æ–¥</div>
                            <div class="user-info-value">${user.city}</div>
                        </div>
                    </div>
                ` : ''}
                
                <div class="user-info-item">
                    <i class="fas fa-clock"></i>
                    <div>
                        <div class="user-info-label">–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç</div>
                        <div class="user-info-value">${user.online ? '–≤ —Å–µ—Ç–∏' : formatTime(user.lastSeen)}</div>
                    </div>
                </div>
            </div>
            
            <div style="display: flex; gap: 12px; margin-top: 32px;">
                <button class="btn btn-primary" onclick="createChatWithUser('${user.id}'); closeUserProfile();">
                    <span class="btn-text">–ù–∞–ø–∏—Å–∞—Ç—å</span>
                    <span class="btn-icon"><i class="fas fa-comment"></i></span>
                </button>
                <button class="btn" onclick="blockUser('${user.id}')" style="background: rgba(239, 68, 68, 0.1); color: var(--danger);">
                    <span class="btn-text">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å</span>
                    <span class="btn-icon"><i class="fas fa-ban"></i></span>
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
}

function closeUserProfile() {
    const modal = document.getElementById('userProfileModal');
    if (modal) {
        modal.classList.remove('active');
        setTimeout(() => modal.remove(), 300);
    }
}

function blockUser(userId) {
    if (confirm('–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')) {
        showToast('üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'success');
        closeUserProfile();
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
function openProfile() {
    console.log('üë§ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è');
    document.getElementById('profileModal').classList.add('active');
    
    document.getElementById('profileName').value = currentUser.name || '';
    document.getElementById('profileUsername').value = '@' + (currentUser.username || '');
    document.getElementById('profileBio').value = currentUser.bio || '';
    document.getElementById('profileStatus').value = currentUser.status || '';
    document.getElementById('profilePhone').value = currentUser.phone || '';
    document.getElementById('profileBirthday').value = currentUser.birthday || '';
    document.getElementById('profileCity').value = currentUser.city || '';
    
    const avatarText = currentUser.name[0].toUpperCase();
    document.getElementById('profileAvatarText').textContent = avatarText;
    
    if (currentUser.avatarUrl) {
        document.getElementById('profileAvatarImg').src = currentUser.avatarUrl;
        document.getElementById('profileAvatarImg').style.display = 'block';
        document.getElementById('profileAvatarText').style.display = 'none';
    }
    
    document.getElementById('privacyOnlineStatus').checked = currentUser.settings?.showOnlineStatus !== false;
    document.getElementById('privacyLastSeen').checked = currentUser.settings?.showLastSeen !== false;
    document.getElementById('privacyProfilePhoto').checked = currentUser.settings?.showProfilePhoto !== false;
    document.getElementById('settingsNotifications').checked = currentUser.settings?.notifications !== false;
    document.getElementById('settingsSound').checked = currentUser.settings?.soundEnabled !== false;
}

function closeProfile() {
    document.getElementById('profileModal').classList.remove('active');
}

function switchProfileTab(tab) {
    document.querySelectorAll('.profile-tab').forEach(t => t.classList.remove('active'));
    document.querySelectorAll('.profile-tab-content').forEach(c => c.classList.remove('active'));
    
    event.target.classList.add('active');
    document.getElementById(`profileTab${tab.charAt(0).toUpperCase() + tab.slice(1)}`).classList.add('active');
}

async function uploadAvatar(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    if (!file.type.startsWith('image/')) {
        showToast('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'error');
        return;
    }
    
    if (file.size > 5 * 1024 * 1024) {
        showToast('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5 –ú–ë', 'error');
        return;
    }
    
    const reader = new FileReader();
    reader.onload = function(e) {
        const avatarUrl = e.target.result;
        
        document.getElementById('profileAvatarImg').src = avatarUrl;
        document.getElementById('profileAvatarImg').style.display = 'block';
        document.getElementById('profileAvatarText').style.display = 'none';
        
        currentUser.avatarUrl = avatarUrl;
        localStorage.setItem('vibechat_user', JSON.stringify(currentUser));
        
        document.getElementById('userAvatarImg').src = avatarUrl;
        document.getElementById('userAvatarImg').style.display = 'block';
        document.getElementById('userAvatarText').style.display = 'none';
        
        showToast('‚úÖ –ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success');
    };
    reader.readAsDataURL(file);
}

async function saveProfile() {
    const name = document.getElementById('profileName').value.trim();
    const bio = document.getElementById('profileBio').value.trim();
    const status = document.getElementById('profileStatus').value.trim();
    const phone = document.getElementById('profilePhone').value.trim();
    const birthday = document.getElementById('profileBirthday').value;
    const city = document.getElementById('profileCity').value.trim();
    
    if (!name) {
        showToast('–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', 'error');
        return;
    }
    
    currentUser.name = name;
    currentUser.bio = bio;
    currentUser.status = status;
    currentUser.phone = phone;
    currentUser.birthday = birthday;
    currentUser.city = city;
    
    localStorage.setItem('vibechat_user', JSON.stringify(currentUser));
    updateUserProfile();
    
    showToast('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', 'success');
}

async function savePrivacy() {
    currentUser.settings = currentUser.settings || {};
    currentUser.settings.showOnlineStatus = document.getElementById('privacyOnlineStatus').checked;
    currentUser.settings.showLastSeen = document.getElementById('privacyLastSeen').checked;
    currentUser.settings.showProfilePhoto = document.getElementById('privacyProfilePhoto').checked;
    
    localStorage.setItem('vibechat_user', JSON.stringify(currentUser));
    
    showToast('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
}

async function logout() {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) return;
    
    try {
        await fetch(`${API_URL}/auth/logout`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId: currentUser.id })
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
    }
    
    localStorage.removeItem('vibechat_token');
    localStorage.removeItem('vibechat_user');
    location.reload();
}

console.log('‚úÖ profiles.js –∑–∞–≥—Ä—É–∂–µ–Ω');