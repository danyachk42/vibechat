// –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
let registrationData = {};

async function handleRegister(e) {
    e.preventDefault();
    
    const name = document.getElementById('regName').value.trim();
    const username = document.getElementById('regUsername').value.trim();
    const email = document.getElementById('regEmail').value.trim();
    const password = document.getElementById('regPassword').value;

    if (!name || name.length < 2) {
        showToast('–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞', 'error');
        return;
    }

    if (!username || username.length < 5) {
        showToast('Username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤', 'error');
        return;
    }

    if (!email || !email.includes('@')) {
        showToast('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email', 'error');
        return;
    }

    if (!password || password.length < 6) {
        showToast('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤', 'error');
        return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    registrationData = { name, username, email, password };

    const loader = document.getElementById('regLoader');
    const btn = e.target.querySelector('.btn-primary');
    loader.classList.remove('hidden');
    btn.style.pointerEvents = 'none';

    try {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞:', `${API_URL}/auth/send-code`);
        
        const response = await fetch(`${API_URL}/auth/send-code`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email })
        });

        console.log('üì• –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', response.status);

        const data = await response.json();
        console.log('üì¶ –î–∞–Ω–Ω—ã–µ:', data);

        if (response.ok) {
            document.getElementById('verifyEmail').textContent = email;
            document.getElementById('registerModal').classList.remove('active');
            
            setTimeout(() => {
                document.getElementById('verifyModal').classList.add('active');
                document.getElementById('code1').focus();
            }, 300);
            
            showToast('‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å —Å–µ—Ä–≤–µ—Ä–∞', 'success');
            
            if (data.devCode) {
                console.log('üîê –ö–û–î:', data.devCode);
            }
        } else {
            showToast('‚ùå ' + (data.error || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'), 'error');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
        showToast('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!', 'error');
    } finally {
        loader.classList.add('hidden');
        btn.style.pointerEvents = 'auto';
    }
}

async function handleLogin(e) {
    e.preventDefault();
    
    const email = document.getElementById('loginEmail').value.trim();
    const password = document.getElementById('loginPassword').value;

    if (!email || !password) {
        showToast('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
        return;
    }

    const loader = document.getElementById('loginLoader');
    const btn = e.target.querySelector('.btn-primary');
    loader.classList.remove('hidden');
    btn.style.pointerEvents = 'none';

    try {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞:', `${API_URL}/auth/login`);
        
        const response = await fetch(`${API_URL}/auth/login`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username: email, password })
        });

        console.log('üì• –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', response.status);

        const data = await response.json();
        console.log('üì¶ –î–∞–Ω–Ω—ã–µ:', data);

        if (response.ok) {
            localStorage.setItem('vibechat_token', data.token);
            localStorage.setItem('vibechat_user', JSON.stringify(data.user));
            currentUser = data.user;
            
            showToast('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!', 'success');
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            document.getElementById('loginModal').classList.remove('active');
            
            setTimeout(() => showApp(), 1000);
        } else {
            showToast('‚ùå ' + (data.error || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞'), 'error');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
        showToast('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!', 'error');
    } finally {
        loader.classList.add('hidden');
        btn.style.pointerEvents = 'auto';
    }
}

async function verifyCode() {
    const code = Array.from(document.querySelectorAll('.code-input')).map(input => input.value).join('');

    if (code.length !== 6) {
        showToast('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∫–æ–¥ (6 —Ü–∏—Ñ—Ä)', 'error');
        return;
    }

    const email = document.getElementById('verifyEmail').textContent;
    const loader = document.getElementById('verifyLoader');
    loader.classList.remove('hidden');

    try {
        console.log('üì§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...');
        
        // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
        const verifyResponse = await fetch(`${API_URL}/auth/register/verify`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email, code })
        });

        const verifyData = await verifyResponse.json();
        console.log('üì• –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:', verifyData);

        if (!verifyResponse.ok) {
            showToast('‚ùå ' + (verifyData.error || '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥'), 'error');
            loader.classList.add('hidden');
            return;
        }

        console.log('‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π! –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...');

        // –®–∞–≥ 2: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        const completeResponse = await fetch(`${API_URL}/auth/register/complete`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                email: registrationData.email,
                name: registrationData.name,
                username: registrationData.username,
                password: registrationData.password
            })
        });

        const completeData = await completeResponse.json();
        console.log('üì• –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', completeData);

        if (completeResponse.ok) {
            localStorage.setItem('vibechat_token', completeData.token);
            localStorage.setItem('vibechat_user', JSON.stringify(completeData.user));
            currentUser = completeData.user;
            
            showToast('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', 'success');
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            document.getElementById('verifyModal').classList.remove('active');
            
            // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            registrationData = {};
            
            setTimeout(() => showApp(), 1000);
        } else {
            showToast('‚ùå ' + (completeData.error || '–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'), 'error');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
        showToast('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
    } finally {
        loader.classList.add('hidden');
    }
}

function showLogin() {
    document.getElementById('registerModal').classList.remove('active');
    document.getElementById('loginModal').classList.add('active');
}

function showRegister() {
    document.getElementById('loginModal').classList.remove('active');
    document.getElementById('registerModal').classList.add('active');
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É –ø–æ–ª—è–º–∏ –∫–æ–¥–∞
document.addEventListener('DOMContentLoaded', () => {
    const codeInputs = document.querySelectorAll('.code-input');
    
    codeInputs.forEach((input, index) => {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é
        input.addEventListener('input', (e) => {
            if (e.target.value.length === 1 && index < codeInputs.length - 1) {
                codeInputs[index + 1].focus();
            }
        });

        // –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–æ–ª—é –ø—Ä–∏ Backspace
        input.addEventListener('keydown', (e) => {
            if (e.key === 'Backspace' && !e.target.value && index > 0) {
                codeInputs[index - 1].focus();
            }
        });

        // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        input.addEventListener('keypress', (e) => {
            if (!/[0-9]/.test(e.key)) {
                e.preventDefault();
            }
        });

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—è
        if (index === codeInputs.length - 1) {
            input.addEventListener('input', (e) => {
                if (e.target.value.length === 1) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
                    const allFilled = Array.from(codeInputs).every(inp => inp.value.length === 1);
                    if (allFilled) {
                        setTimeout(() => verifyCode(), 300);
                    }
                }
            });
        }
    });
});

console.log('‚úÖ auth.js –∑–∞–≥—Ä—É–∂–µ–Ω');
